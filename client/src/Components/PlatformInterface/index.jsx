import React, { useState } from "react";
import axios from "axios";
import Cookies from 'js-cookie';
import './index.css';
import Header from "../Header/Header";

const PlatformInterface = () => {
  const [customPrompt, setCustomPrompt] = useState("");
  const [quizQuestions, setQuizQuestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState(1);
  const [saved, setSaved] = useState(false);
  const [error, setError] = useState('');

  const handleGenerateQuestions = async (e) => {
    e.preventDefault();
    if (!customPrompt.trim()) {
      setError('Please enter a prompt');
      return;
    }

    setLoading(true);
    setSaved(false);
    const token = Cookies.get('jwt_token');

    try {
      const res = await axios.post(
        "http://localhost:7000/api/platform/create", // <- updated route
        { prompt: customPrompt },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      const platformQuestions = res.data.platform || [];
      setQuizQuestions(platformQuestions);
      setStep(2);
      setError('');
    } catch (error) {
      console.error("Error generating questions:", error);
      setError('Failed to generate questions');
    }
    setLoading(false);
  };

  const handleSaveQuiz = async (e) => {
    e.preventDefault();
    const token = Cookies.get('jwt_token');

    if (!token) {
      setError('Authentication required');
      return;
    }

    if (quizQuestions.length === 0) {
      setError('No questions to save');
      return;
    }

    try {
      const res = await axios.post(
        "http://localhost:7000/api/platform/save",
        {
          title: customPrompt,
          questions: quizQuestions
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      setSaved(true);
      setError('');
    } catch (error) {
      console.error("Error saving quiz:", error);
      setError('Failed to save quiz');
    }
  };

  return (
    <>
      <Header />
      <div className="platform-container">
        <div className="content-wrapper">
          <h1 className="platform-title">ðŸ§  Create an AI-Powered Quiz</h1>
          <p className="platform-subtitle">Type a prompt like you're chatting with AI!</p>

          {step === 1 && (
            <form onSubmit={handleGenerateQuestions} className="prompt-form">
              <label className="prompt-label">Enter your prompt</label>
              <div className="chatgpt-style-box">
                <textarea
                  className="chatgpt-prompt-textarea"
                  placeholder="e.g., Create 15 multiple choice questions for Class 9 Chemistry - Acids, Bases, and Salts"
                  value={customPrompt}
                  onChange={(e) => setCustomPrompt(e.target.value)}
                  rows={6}
                />
              </div>
              <button
                type="submit"
                className="action-button purple-button"
              >
                {loading ? "Generating Quiz..." : "Generate Quiz"}
              </button>
              {error && <p className="error-text">{error}</p>}
            </form>
          )}

          {step === 2 && quizQuestions.length > 0 && !saved && (
            <div className="questions-section">
              <h2 className="section-title">Quiz Generated by AI</h2>
              <form className="questions-form" onSubmit={handleSaveQuiz}>
                {quizQuestions.map((q, index) => (
                  <div key={index} className="question-item">
                    <p className="question-text">
                      {index + 1}. {q.question}
                    </p>
                    <ul className="options-list">
                      {q.options.map((opt, i) => (
                        <li key={i} className="option-item">{opt}</li>
                      ))}
                    </ul>
                    <p className="correct-answer">Correct Answer: {q.answer}</p>
                  </div>
                ))}
                <button
                  type="submit"
                  className="action-button green-button"
                >
                  Save Quiz
                </button>
                {error && <p className="error-text">{error}</p>}
              </form>
            </div>
          )}

          {saved && (
            <div className="success-section">
              <h2 className="success-title">ðŸŽ‰ Quiz Saved Successfully!</h2>
              <button
                className="action-button blue-button"
                onClick={() => {
                  setQuizQuestions([]);
                  setCustomPrompt("");
                  setSaved(false);
                  setStep(1);
                }}
              >
                Create Another Quiz
              </button>
            </div>
          )}
        </div>
      </div>
    </>
  );
};

export default PlatformInterface;
